##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;

    server_name {{server_name}};

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        if (!-f $request_filename) {
            proxy_pass http://localhost:8080;
            break;
        }

        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    include snippets/fastcgi-php.conf;
    #
    #    # With php5-cgi alone:
    #    fastcgi_pass 127.0.0.1:9000;
    #    # With php5-fpm:
    #    fastcgi_pass unix:/var/run/php5-fpm.sock;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny all;
    #}
}

## SSL configuration
#server {
#    listen 443 ssl default_server;
#    listen [::]:443 ssl default_server;
#    http2_push_preload on;
#
#    root /var/www/html;
#
#    # Add index.php to the list if you are using PHP
#    index index.html index.htm index.nginx-debian.html index.php;
#
#    server_name {{server_name}};
#
#    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
#    ssl on;
#    ssl_certificate /etc/letsencrypt/live/{{server_name}}/fullchain.pem;
#    ssl_certificate_key /etc/letsencrypt/live/{{server_name}}/privkey.pem;
#
#    ssl_session_timeout 1d;
#    ssl_session_cache shared:SSL:50m;
#
#    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
#    ssl_dhparam /etc/nginx/ssl/dhparams/jenkins.pem;
#
#    # intermediate configuration. tweak to your needs.
#    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
#    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
#    ssl_prefer_server_ciphers on;
#
#    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
#    add_header Strict-Transport-Security max-age=15768000;
#
#    # OCSP Stapling ---
#    # fetch OCSP records from URL in ssl_certificate and cache them
#    ssl_stapling on;
#    ssl_stapling_verify on;
#
#    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
#    ssl_trusted_certificate  /etc/letsencrypt/live/{{server_name}}/chain.pem;
#
#    location / {
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header Host $http_host;
#        proxy_redirect off;
#        if (!-f $request_filename) {
#            proxy_pass http://localhost:8080;
#            break;
#        }
#
#        # First attempt to serve request as file, then
#        # as directory, then fall back to displaying a 404.
#        try_files $uri $uri/ =404;
#    }
#
#    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#    #
#    #location ~ \.php$ {
#    #    include snippets/fastcgi-php.conf;
#    #
#    #    # With php5-cgi alone:
#    #    fastcgi_pass 127.0.0.1:9000;
#    #    # With php5-fpm:
#    #    fastcgi_pass unix:/var/run/php5-fpm.sock;
#    #}
#
#    # deny access to .htaccess files, if Apache's document root
#    # concurs with nginx's one
#    #
#    #location ~ /\.ht {
#    #    deny all;
#    #}
#}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#    listen 80;
#    listen [::]:80;
#
#    server_name example.com;
#
#    root /var/www/example.com;
#    index index.html;
#
#    location / {
#        try_files $uri $uri/ =404;
#    }
#}

